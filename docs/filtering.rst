Filtering
=========

Flask-jsonapi supports resource filtering.
[`specification <http://jsonapi.org/format/#fetching-filtering>`__]


**Note:**

All results of examples are ``filters`` parameter passed to ``read_many`` method of ``ResourceList`` or ``get_list`` method of ``ResourceRepositoryViewSet``.


Simple Usage
~~~~~~~~~~~~
Let'd define a simple filter schema with one filter:

.. code-block:: python

    class ExampleFiltersSchema(filters_schema.FilterSchema):
        title = filters_schema.FilterField()


Now use it in ``ResourceList`` or ``ResourceRepositoryViewSet``:

.. code-block:: python

    class ExampleListView(resources.ResourceList):
        schema = ExampleSchema()
        filter_schema = ExampleFiltersSchema()

Request:

.. code-block:: bash

    /example-resource?filter[title]=something

Will result in:

.. code-block:: python

    {'title': 'something'}


List of filter values
~~~~~~~~~~~~~~~~~~~~~

To parse many values fo single filter use ``ListFilterField``:

.. code-block:: python

    class ExampleFiltersSchema(filters_schema.FilterSchema):
        title = filters_schema.ListFilterField()

Request:

.. code-block:: bash

    /example-resource?filter[title]=something,other

Will result in:

.. code-block:: python

    {'title': ['something', 'other']}


Parsing filter values
~~~~~~~~~~~~~~~~~~~~~

By default filter values are parsed as strings. To change it, pass a desired subclass of ``marshmallow.fields.Field`` as ``type_`` argument to field constructor:

[`reference <https://marshmallow.readthedocs.io/en/3.0/_modules/marshmallow/fields.html>`__]


.. code-block:: python

    class ExampleFiltersSchema(filters_schema.FilterSchema):
        title = filters_schema.FilterField(type_=fields.Float)

Request:

.. code-block:: bash

    /example-resource?filter[score]=4.5

Will result in:

.. code-block:: python

    {'score': 4.5}



Overriding filter attribute
~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can override the key with witch the filter will be parsed with ``attribute`` parameter:

.. code-block:: python

    class ExampleFiltersSchema(filters_schema.FilterSchema):
        title = filters_schema.FilterField(attribute='renamed')

Request:

.. code-block:: bash

    /example-resource?filter[title]=something

Will result in:

.. code-block:: python

    {'renamed': 'something}


Using Operators
~~~~~~~~~~~~~~~

The base JSONAPI specification is agnostic about filtering strategies supported by a server,
Flask-JsonApi added a support for operators.

**Note:**

List of supported operators is available [`here <https://github.com/socialwifi/flask-jsonapi/blob/master/flask_jsonapi/filters_schema.py>`__]

**Note:**

Filters with operators can be automatically applied to query using ``sqlalchemy_repositories.SqlAlchemyModelRepository``.
This is achieved using [`sqlalchemy-django-query <https://github.com/socialwifi/flask-jsonapi/blob/master/flask_jsonapi/utils/sqlalchemy_django_query.py>`__]


Defining a set of allowed operators:

.. code-block:: python

    class ExampleFiltersSchema(filters_schema.FilterSchema):
        title = filters_schema.FilterField(operators=['eq', 'ne'])

Request:

.. code-block:: bash

    /example-resource?filter[title][ne]=something

Will result in:

.. code-block:: python

    {'title__ne': 'something}


**Note:**

You can also specify a default operator (when none are provided in query string) with ``default_operator`` parameter.


Marshmallow-Jsonapi Schema integration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Filters can be autogenerated using supplied schema.


Let's define a schema:

.. code-block:: python

    class ExampleSchema(marshmallow_jsonapi.Schema):
        id = fields.UUID(required=True)
        body = fields.Str()
        is_active = fields.Boolean()

        class Meta:
            type_ = 'example'

Let's define a filters schema that uses this schema:

.. code-block:: python

    class ExampleFiltersSchema(filters_schema.FilterSchema):
        class Meta:
            schema = ExampleSchema
            fields = ['id', 'body', 'is_active']

Now you can filter by the fields specified in ``class Meta``:


Request:

.. code-block:: bash

    /example-resource?filter[is-active]=True

Will result in:

.. code-block:: python

    {'is_active': True}


Relationship filtering
~~~~~~~~~~~~~~~~~~~~~~

Relationships within resources can be also used in filtering.

Let's define two related filter schemas:

.. code-block:: python

        class FirstFiltersSchema(filters_schema.FilterSchema):
            attribute = filters_schema.FilterField()

        class SecondFiltersSchema(filters_schema.FilterSchema):
            relationship = filters_schema.RelationshipFilterField(SecondFiltersSchema)

Request:

.. code-block:: bash

    /second-resource?filter[relationship][attribute]=something

Will result in:

.. code-block:: python

    {'relationship__attribute': 'something}


Relationship filters can be automatically applied to query using ``sqlalchemy_repositories.SqlAlchemyModelRepository``.
This is achieved using [`sqlalchemy-django-query <https://github.com/socialwifi/flask-jsonapi/blob/master/flask_jsonapi/utils/sqlalchemy_django_query.py>`__]
